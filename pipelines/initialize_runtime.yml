##############################################################################################################
#                                                                                                            #
# initialize_runtime.yml : Registers a runtime                                                               #
#                                                                                                            #
# ####### Inputs ########                                                                                    #
# stage: (Mandatory) Id of the asset to be Imported                                                          #
# aliasName: (Mandatory) name of the asset                                                                   #
##############################################################################################################

trigger: none


pool:
  vmImage: ubuntu-latest

variables:
- name: SAG_IS_CLOUD_REGISTER_URL
  value: null
- name: SAG_IS_CLOUD_REGISTER_TOKEN
  value: null
- name: init
  value: true
- group: webMethodsIO_group
- group: azure_group
- group: github_group
- name: repoPath
  value: $(gitOwner)/$(repoName)



steps:
- checkout: self
  submodules: "true"
  persistCredentials: "true"
  clean: "true"
  path: self

- script: |
    echo "##vso[task.setvariable variable=environment;]play"
    echo "##vso[task.setvariable variable=visibility;]Private"
    echo "##vso[task.setvariable variable=description;]Automated"
  displayName: 'Default Environment'



- bash: |
    pwd
    cd ../self
    pwd
    ls -ltr
    echo "##vso[task.setvariable variable=source_environment_hostname]`yq -e ".tenant.hostname" configs/env/$(environment).yml`"
    echo "##vso[task.setvariable variable=source_environment_port]`yq -e ".tenant.port" configs/env/$(environment).yml`"
    echo "##vso[task.setvariable variable=admin_user]`yq -e ".tenant.admin_username" configs/env/$(environment).yml`"
    echo "##vso[task.setvariable variable=source_type]`yq -e ".tenant.type" configs/env/$(environment).yml`"
    echo "##vso[task.setvariable variable=repo_user]`yq -e ".repo.user" configs/repo.yml`"
    
        echo $(System.DefaultWorkingDirectory)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Get Environment Tenant Details'
- script: |
      cd ../
      LOCAL_DEV_URL=https://$(source_environment_hostname):$(source_environment_port)
      echo ${LOCAL_DEV_URL}

      ########GitHub 
        HOME_DIR=$(System.DefaultWorkingDirectory)/../

        chmod +x ./self/pipelines/scripts/*.sh
        ./self/pipelines/scripts/initializeRuntime.sh ${LOCAL_DEV_URL} $(admin_user) $(admin_password) $(aliasName) $(visibility) $(description) debug
        file="./$(aliasName)_Paired.json"
        echo $file
        if test -f "$file"; then
          echo "$file exists."
          paired_json=$(cat $file)
          echo $paired_json
          SAG_IS_CLOUD_REGISTER_URL=$(jq .env.SAG_IS_CLOUD_REGISTER_URL ./$(aliasName)_Paired.json)
          echo "##vso[task.setvariable variable=SAG_IS_CLOUD_REGISTER_URL;]$SAG_IS_CLOUD_REGISTER_URL"
          echo $(SAG_IS_CLOUD_REGISTER_URL)
          
          az extension add --name azure-devops
          az devops login
          az devops configure --defaults organization=https://dev.azure.com/SrinivasanSabapathy/ project="webMethodsIO_Integration"
          $group_id = az pipelines variable-group create --name $(aliasName) --variables SAG_IS_CLOUD_REGISTER_URL=$(SAG_IS_CLOUD_REGISTER_URL) SAG_IS_EDGE_CLOUD_ALIAS=$(SAG_IS_EDGE_CLOUD_ALIAS)
          echo $group_id
          $group_id = $(az pipelines variable-group list -p $(System.TeamProject) --group-name $(aliasName) --query '[0].id' -o json)
          echo $group_id
          az pipelines variable-group variable update --group-id $group_id --project "webMethodsIO_Integration" --name "SAG_IS_CLOUD_REGISTER_URL" --value $(SAG_IS_CLOUD_REGISTER_URL)

          echo "##vso[task.setvariable variable=SAG_IS_CLOUD_REGISTER_URL;]$(jq .env.SAG_IS_CLOUD_REGISTER_URL $file)"
          echo "##vso[task.setvariable variable=SAG_IS_CLOUD_REGISTER_URL]`jq .env.SAG_IS_CLOUD_REGISTER_URL ./$(aliasName)_Paired.json`"
          echo $(SAG_IS_CLOUD_REGISTER_URL)
          echo "##vso[task.setvariable variable=SAG_IS_CLOUD_REGISTER_TOKEN;]$(jq .env.SAG_IS_CLOUD_REGISTER_TOKEN $file)"
          echo $(SAG_IS_CLOUD_REGISTER_TOKEN)
          echo "##vso[task.setvariable variable=SAG_IS_EDGE_CLOUD_ALIAS;]$(jq .env.SAG_IS_EDGE_CLOUD_ALIAS $file)"
          echo $(SAG_IS_EDGE_CLOUD_ALIAS)
        else
          echo "File Not found!"
        fi
  displayName: 'Register Runtime'
  enabled: true
  env:
    AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
- pwsh: |
     az extension add --name azure-devops
     az devops configure --defaults organization=https://dev.azure.com/SrinivasanSabapathy/ project="webMethodsIO_Integration"
     $group_id = az pipelines variable-group create --name $(aliasName) --variables SAG_IS_CLOUD_REGISTER_URL=$(SAG_IS_CLOUD_REGISTER_URL) SAG_IS_EDGE_CLOUD_ALIAS=$(SAG_IS_EDGE_CLOUD_ALIAS)
     $group_id = $(az pipelines variable-group list -p $(System.TeamProject) --group-name $(aliasName) --query '[0].id' -o json)
     echo $group_id
     az pipelines variable-group variable create --group-id $group_id --project "webMethodsIO_Integration" --name "SAG_IS_CLOUD_REGISTER_TOKEN" --secret true --value $(SAG_IS_CLOUD_REGISTER_TOKEN)
  env:
    AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
  